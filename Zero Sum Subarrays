               /*               Zero Sum Subarrays             */
               
    // PROBLEM LINK->   https://practice.geeksforgeeks.org/problems/zero-sum-subarrays1825/1
               
/*
INPUT->
2
6
0 0 5 5 0 0
10
6 -1 -3 4 -2 2 4 6 -12 -7

OUTPUT->
6
4
*/

/* This problem can be solved by calculating the prefix sum of the array . We traverse the array and if the sum is 0 or repeats itself we increment the count .
    Here we can use a hash map to store the frequency of the sum and then accordingly increment the count. */

//SOLUTION->

#include<bits/stdc++.h>
using namespace std;

int subArray(int arr[],int n)
{
    long long sum=0,count=0,i;
    map<int,int>hash;
    hash[0]=1;
    for(i=0;i<n;i++)
    {
        sum+=arr[i];
        count+=(hash[sum]);
        hash[sum]++;
    }
    return count;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,i;
        cin>>n;
        int arr[n+1];
        for(i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        int ans=subArray(arr,n);
        cout<<ans<<endl;
    }
    return 0;
}
