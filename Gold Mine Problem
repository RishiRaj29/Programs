/*      Gold Mine Problem     */

// Problem Link-> https://www.geeksforgeeks.org/gold-mine-problem/

// Solution->

#include <bits/stdc++.h>
using namespace std;

bool comp(int a, int b)
{
    return (a<b);
}

int max_gold(int n,int m,vector<vector<int>> grid)
{
    if(n==1)//if its a 1-D grid then simply add all the values
    {
        return accumulate(grid[0].begin(), grid[0].end(), 0);
    }
    vector<vector<int>> dp(n,vector<int>(m,0));
    int i,j;
    for(i=0;i<n;i++)
        dp[i][m-1]=grid[i][m-1];

    for(j=m-2;j>=0;j--)
    {
        for(i=0;i<n;i++)
        {
            if(i==0)//if its the first row then we can either move forward or diagonally down
            {
                dp[i][j]=max(grid[i][j]+dp[i][j+1],grid[i][j]+dp[i+1][j+1]);
            }
            else if(i==n-1)//if its the last row then we can either move forward or diagonally up
            {
                dp[i][j]=max(grid[i][j]+dp[i][j+1],grid[i][j]+dp[i-1][j+1]);
            }
            else// else we have the option to move in all three directions
            {
                dp[i][j]=max({grid[i][j]+dp[i][j+1],grid[i][j]+dp[i-1][j+1],grid[i][j]+dp[i+1][j+1]},comp);
            }
        }
    }

    vector<int>temp;

    for(i=0;i<n;i++)
        temp.push_back(dp[i][0]);
    sort(temp.begin(),temp.end());
    return temp[temp.size()-1];
}

int main()
{
    int n,m,i,j;
    cout<<"Enter the Rows and Columns-";
    cin>>n>>m;
    
    vector<vector<int>> grid(n,vector<int>(m,0));
    
    cout<<"Enter the Amount of Gold Present in each cell-";
    for(i=0;i<n;i++)
        for(j=0;j<m;j++)
            cin>>grid[i][j];
            
    cout<<"The Maximum Amount of Gold that can be collected is-"<<max_gold(n,m,grid);
    return 0;
}
