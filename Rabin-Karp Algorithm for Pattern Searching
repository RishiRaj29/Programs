/*            Rabin-Karp Algorithm for Pattern Searching         */

//Problem Link-> https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/

/*  Approach-> 
               In Rabin-Karp Algorithm we will convert the given "pattern" into a "value" using the "codes" dictionary . We will then make a window of length=pattern.length() 
               which will slide over the "text" string and convert all the characters of the window into "data" using the dictionary . 
               Now if both "pattern" and window have same value on conversion then match each character of window with "pattern".
*/

//Solution->

#include<bits/stdc++.h>

using namespace std;

void rabin_karp(string text,string pattern)  //RABIN-KARP ALGORITHM
{                                                                       // TIME COMPLEXITY->  O(n+m)
    map<char,int>codes;
    codes[' ']=0;
    codes['A']=1;codes['B']=2;codes['C']=3;codes['D']=4;codes['E']=5;codes['F']=6;codes['G']=7;
    codes['H']=8;codes['I']=9;codes['J']=10;codes['K']=11;codes['L']=12;codes['M']=13;codes['N']=14;
    codes['O']=15;codes['P']=16;codes['Q']=17;codes['R']=18;codes['S']=19;codes['T']=20;codes['U']=21;
    codes['V']=22;codes['W']=23;codes['X']=24;codes['Y']=25;codes['Z']=26;

    int value=0,data=0,k;

    for(int i=0;i<pattern.length();i++)
        value+=codes[pattern[i]];

    int i=0,j=pattern.length();

    for(k=i;k<j;k++)
        data+=codes[text[k]];

    if(data==value)
    {
        int t=i;
        for(k=0;k<pattern.length();k++)
        {
            if(pattern[k]!=text[t])
                break;
            t++;
        }
        if(k==pattern.length())
            cout<<"Pattern found at index "<<i<<"\n";
    }
    data-=codes[text[i]];
    i++;j++;

    while(j<=text.length())
    {
        data+=codes[text[j-1]];
        if(data==value)
        {
            int t=i;
            for(k=0;k<pattern.length();k++)
            {
                if(pattern[k]!=text[t])
                    break;
                t++;
            }
            if(k==pattern.length())
                cout<<"Pattern found at index "<<i<<"\n";
        }
        data-=codes[text[i]];
        i++;j++;
    }
}

int main()
{
    string text="AABAACAADAABAABA",pattern="AABA";
    
    
    /*int i=0,j,f=-1,k=-1;
    while(i<text.length())    NAIVE APPROACH
    {
        if(text[i]==pattern[0])
        {                         TIME COMPLEXITY-> O(n*m)
            f=i;k=i;
            k++;
            j=1;
            while(j<pattern.length())
            {
                if(pattern[j]!=text[k])
                    break;
                else
                {
                    k++;
                    j++;
                }
            }
            if(j==pattern.length())
                cout<<"Pattern found at "<<f<<endl;
            i++;
        }
        else
            i++;
    }*/
    
    
    rabin_karp(text,pattern);
    return 0;
}
