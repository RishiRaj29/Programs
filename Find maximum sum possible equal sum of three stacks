       /*   Given three stacks of the positive numbers, the task is to find the possible equal maximum sum of the stacks with the removal of top elements allowed. 
       Stacks are represented as an array, and the first index of the array represent the top element of the stack.  */
       
/*
INPUT->
2
2 2 2
3 10
4 5
2 1
5 3 4
1 1 1 2 3
2 3 4
1 4 5 2

OUTPUT->
0
5
*/

//SOLUTION->     Time Complexity : O(n1 + n2 + n3)

#include<bits/stdc++.h> 
using namespace std; 

void solve();

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        solve();
    }
    return 0; 
} 

void solve()
{
    stack<int>s1,s2,s3;
    int n1,n2,n3,x,sum1=0,sum2=0,sum3=0;
    cin>>n1>>n2>>n3;
    for(int i=0;i<n1;i++)
    {
        cin>>x;
        s1.push(x);
        sum1+=x;
    }
    for(int i=0;i<n2;i++)
    {
        cin>>x;
        s2.push(x);
        sum2+=x;
    }
    for(int i=0;i<n3;i++)
    {
        cin>>x;
        s3.push(x);
        sum3+=x;
    }
    while(1)
    {
        if(s1.empty()==true||s2.empty()==true||s3.empty()==true)
        {
            cout<<0<<endl;
            break;
        }
        if(sum1==sum2&&sum2==sum3)
        {
            cout<<sum1<<endl;
            break;
        }
        else if(sum1>=sum2&&sum1>=sum3)
        {
            x=s1.top();
            sum1-=x;
            s1.pop();
        }
        else if(sum2>=sum1&&sum2>=sum3)
        {
            x=s2.top();
            sum2-=x;
            s2.pop();
        }
        else if(sum3>=sum1&&sum3>=sum2)
        {
            x=s3.top();
            sum3-=x;
            s3.pop();
        }
    }
}
