/*        Boundary Traversal of binary tree       */

// Problem Link->  https://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/

// Solution->

#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};


Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if(currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if(currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

void print_left_nodes(Node *root,vector<int>&ans)
{
    if(root->left==NULL&&root->right==NULL)
        return;

    if(root->left)
    {
        ans.push_back(root->data);
        print_left_nodes(root->left,ans);
    }
    else
    {
        ans.push_back(root->data);
        print_left_nodes(root->right,ans);
    }
}

void print_leaf_nodes(Node *root,vector<int>&ans)
{
    if(root->left==NULL&&root->right==NULL)
    {
        ans.push_back(root->data);
        return;
    }
    if(root->left)
        print_leaf_nodes(root->left,ans);

    if(root->right)
        print_leaf_nodes(root->right,ans);
}

void print_right_nodes(Node *root,vector<int>&ans)
{   
      // We will first call the fun and then print because we want the right most nodes to be printed in reverse order
    if(root->left==NULL&&root->right==NULL)
        return;

    if(root->right)
    {
        print_right_nodes(root->right,ans);
        ans.push_back(root->data);
    }
    else
    {
        print_right_nodes(root->left,ans);
        ans.push_back(root->data);
    }
}

class Solution {
public:
    vector <int> printBoundary(Node *root)
    {
        vector<int>ans;
        if(root==NULL)
            return ans;
            
        ans.push_back(root->data);// adding the root node
        
        if(root->left)  // 1) Adding all the left most nodes of the Binary Tree
            print_left_nodes(root->left,ans);
            
        if(root->left)  // 2) Adding all the leaf nodes of binary tree 
            print_leaf_nodes(root->left,ans);
        if(root->right)
            print_leaf_nodes(root->right,ans);
        
        if(root->right) // 3) Adding all the right most nodes of the binary tree
            print_right_nodes(root->right,ans);
        return ans;
    }
};


int main() {
    int t;
    string tc;
    getline(cin, tc);
    t=stoi(tc);
    while(t--)
    {
        string s ,ch;
        getline(cin, s);
        Node* root = buildTree(s);
        Solution ob;
        vector <int> res = ob.printBoundary(root);
        for (int i : res) cout << i << " ";
        cout << endl;
    }
    return 0;
}  
