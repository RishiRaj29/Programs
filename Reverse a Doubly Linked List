/*  Reverse a Doubly Linked List  */

//The Implementation is really simple. You just need to swap the next and prev fields of each node one by one by traversing the list


#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *prev;
    struct Node *next;
};

void Insert(struct Node **head,int value)
{
    struct Node *new_node,*temp=*head;
    new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=value;
    new_node->next=NULL;
    if((*head)==NULL)
    {
        new_node->prev=NULL;
        *head=new_node;
    }
    else
    {
        while(temp->next!=NULL)
             temp=temp->next;
        new_node->prev=temp;
        temp->next=new_node;
    }
}

struct Node* ReverseList(struct Node *head)
{
    struct Node *c=head,*temp;
    while(c->next!=NULL)
    {
        temp=c->next;    // The Logic of swapping is the same as swapping of data values of two variables
        c->next=c->prev;
        c->prev=temp;
        c=c->prev;
    }
    temp=c->next;
    c->next=c->prev;
    c->prev=temp;
    head=c;
    return head;
}

void Display(struct Node *head)
{
    struct Node *temp=head;
    while(temp->next!=NULL)
    {
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<temp->data<<endl;
}
int main()
{
    struct Node *head=NULL;
    Insert(&head,1);
    Insert(&head,2);
    Insert(&head,4);
    Insert(&head,6);
    Insert(&head,6);
    Insert(&head,9);
    Insert(&head,11);
    cout<<"The List Values before reversing are-\n";
    Display(head);
    head=ReverseList(head);
    cout<<"The List Values after reversing are-\n";
    Display(head);
    return 0;
}
