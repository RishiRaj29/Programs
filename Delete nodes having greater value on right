/*            Delete nodes having greater value on right              */

//Problem Link-> https://www.geeksforgeeks.org/delete-nodes-which-have-a-greater-value-on-right-side/

/* Approach-> 1) Reverse the List
              2) Store the max value and delete all the values on the right side  which have value less than max value. Remember to update this value as well.
              3) Again Reverse the List
*/

//Solution->

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *next;
};

struct Node *head=NULL;

void Insert(Node **head,int value)//Inserts value at last
{
    struct Node *new_node,*temp=*head;
    new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=value;
    new_node->next=NULL;
    if((*head)==NULL)
        *head=new_node;
    else
    {
        while(temp->next!=NULL)
             temp=temp->next;
        temp->next=new_node;
    }
}

void ReverseList(Node *prev,Node *curr)// Reverses the Linked List using recursion 
{
    if(curr)
    {
        ReverseList(curr,curr->next);
        curr->next=prev;
    }
    else
    {
        head=prev;
    }
}


void Display(Node *head)
{
    struct Node *temp=head;
    while(temp->next!=NULL)
    {
        cout<<temp->data<<"  ";
        temp=temp->next;
    }
    cout<<temp->data<<endl;
}

void DeleteNodes(Node *head)
{
    Node *slow=head,*fast=head->next;
    int max_value=head->data;
    while(fast!=NULL)
    {
        if(max_value>fast->data)
        {
            slow->next=fast->next;
            delete fast;
            fast=slow->next;
        }
        else
        {
            max_value=fast->data;
            slow=fast;
            fast=fast->next;
        }
    }
}

int main()
{
    Insert(&head,10);
    Insert(&head,20);
    Insert(&head,30);
    Insert(&head,40);
    Insert(&head,50);
    Insert(&head,60);
    cout<<"The Original List is-\n";
    Display(head);
    ReverseList(NULL,head);
    DeleteNodes(head);
    ReverseList(NULL,head);
    cout<<"The List now is-\n";
    Display(head);
    return 0;
}
