/*        MERGE SORT           */

#include<bits/stdc++.h>
using namespace std;


/*  Merge Sort is based on Divide and Conquer Approach. 
It has a time complexity of O(nlogn) for all the 3 cases.  */

void merge(int arr[],int left,int mid,int right)
{
    /* Here we merge all the sub arrays*/
    
    
    int i=left,k=left,j=mid+1;
    int temp[101];
    while(i<=mid && j<=right)
    {
        if(arr[i]<arr[j])
        {
            temp[k]=arr[i];
            i++;
        }
        else if(arr[i]==arr[j])
        {
            temp[k]=arr[i];
            temp[k]=arr[j];
            i++;
            j++;
            k++;
        }
        else
        {
            temp[k]=arr[j];
            j++;
        }
        k++;
    }


    while(i<=mid)
    {
        temp[k]=arr[i];
        i++;k++;
    }
    while(j<=right)
    {
        temp[k]=arr[j];
        j++;k++;
    }


    for(k=left;k<=right;k++)
    {
        arr[k]=temp[k];
    }
}

void merge_sort(int arr[],int left,int right)
{
    /* Here we divide the Array into Sub-Arrays*/
    
    
    if(left<right)
    {
        int mid=(left+right)/2;
        merge_sort(arr,left,mid);
        merge_sort(arr,mid+1,right);
        merge(arr,left,mid,right);
    }
    else
        return;
}


int main()
{
    int n;
	cout<<"Enter the Number of Elements-";
	cin>>n;
	int arr[n+1];
	cout<<"Enter the Elements-";
	for(int i=0;i<n;i++)
        cin>>arr[i];
    cout<<"The Elements before Sort is as follows-\n";
    for(int i=0;i<n;i++)
        cout<<arr[i]<<"  ";
    cout<<endl;
    cout<<"The Elements after Sort is as follows-\n";
    merge_sort(arr,0,n-1);
    for(int i=0;i<n;i++)
        cout<<arr[i]<<"  ";
   	return 0;
}
