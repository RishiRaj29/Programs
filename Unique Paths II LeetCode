/*      Unique Paths II LeetCode      */

// Solution->

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid[0][0]==1)
            return 0;
        
        if(obstacleGrid.size()==1 && obstacleGrid[0].size()==1 && obstacleGrid[0][0]==0)
            return 1;
        int m=obstacleGrid.size(),n=obstacleGrid[0].size();
        
        int dp[m][n],i,j;
        
        for(i = 0;i < m; i++)
        {
            for(j = 0;j < n; j++)
            {
                dp[i][j]=0;
            }
        }
        dp[0][0]=0;
    for(i = 1;i < m; i++)
    {
        if(obstacleGrid[i][0]==1)
        {
            for(int k = i;k < m;k++)
                dp[k][0]=0;
            break;
        }
        else
            dp[i][0]=1;
    }

    for(j = 1;j < n; j++)
    {
        if(obstacleGrid[0][j]==1)
        {
            for(int k = j;k < n;k++)
                dp[0][k]=0;
            break;
        }
        else
            dp[0][j]=1;
    }

    for(i = 1;i < m;i++)
    {
        for(j = 1;j < n;j++)
        {
            if(obstacleGrid[i][j]==1)
                dp[i][j]=0;
            else
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
        }
    }

    return dp[m-1][n-1];
    }
};
