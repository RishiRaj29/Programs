              /*         Product array puzzle         */
              
 //Problem Link-> https://practice.geeksforgeeks.org/problems/product-array-puzzle4525/1
 
 //This problem needs no help as it is very simple and the approach is also very easy.
 
 //Solution->
 
 #include<bits/stdc++.h>
using namespace std;

class Solution{
  public:
    vector<long long int> productExceptSelf(vector<long long int>& nums, int n) {
       
        vector<long long int>ans;  
        long long int p=1,x;
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0)
                p=p*1;
            else
                p=p*nums[i];
        }
        if(count(nums.begin(),nums.end(),0)==0)
        {
            for(int i=0;i<n;i++)
            {
                x=p;
                x=x/nums[i];
                ans.push_back(x);
            }
        }
        else
        {
            for(int i=0;i<n;i++)
            {
                if(nums[i]==0)
                {
                    if(count(nums.begin(),nums.end(),0)==1)
                    {
                        x=p;
                        ans.push_back(x);
                    }
                    else
                    {
                        x=0;
                        ans.push_back(x);
                    }
                }
                else
                {
                    x=0;
                    ans.push_back(x);
                }
            }
        }
        return ans;
    }
};


int main()
 {
    int t;  
    cin>>t;
    while(t--)
    {
        int n;  
        cin>>n;
        vector<long long int> arr(n),vec(n);
        
        for(int i=0;i<n;i++)    
        {
            cin>>arr[i];
        }
        Solution obj;
        vec = obj.productExceptSelf(arr,n);   
        
        for(int i=0;i<n;i++)   
        {
            cout << vec[i] << " ";
        }
        cout<<endl;
    }
    return 0;
} 
