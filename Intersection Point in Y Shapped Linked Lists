/*                  Intersection Point in Y Shapped Linked Lists                        */

//Problem Link->  https://www.geeksforgeeks.org/write-a-function-to-get-the-intersection-point-of-two-linked-lists/

/* Approach-> Make the Size of both the Linked List same and then compare the address while traversing both the lists.
The time complexity of this method is O(m+n) and used Auxiliary space is O(1) */

//Solution->

#include<iostream>
#include<stdio.h>
#include<bits/stdc++.h>
using namespace std;


struct Node
{
    int data;
    struct Node *next;
    Node(int x)
    {
        data = x;
        next = NULL;
    }
};

int intersectPoint(struct Node* head1, struct Node* head2);

Node* inputList(int size)
{
    if(size==0) return NULL;
    
    int val;
    cin>> val;
    
    Node *head = new Node(val);
    Node *tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}


int main()
{
    int T,n1,n2,n3;

    cin>>T;
    while(T--)
    {
        cin>>n1>>n2>>n3;
        
        Node* head1 = inputList(n1);
        Node* head2 = inputList(n2);
        Node* common = inputList(n3);
        
        Node* temp = head1;
        while(temp!=NULL && temp->next != NULL)
            temp = temp->next;
        if(temp!=NULL) temp->next = common;
        
        temp = head2;
        while(temp!=NULL && temp->next != NULL)
            temp = temp->next;
        if(temp!=NULL) temp->next = common;
        
        cout << intersectPoint(head1, head2) << endl;
    }
    return 0;
}


//Function to find intersection point in Y shaped Linked Lists.
int intersectPoint(Node* head1, Node* head2)
{
    // Your Code Here
    if(head1==NULL||head2==NULL)
          return -1;
    else
    {
        int count1=0,count2=0;
        struct Node *temp=head1;
        while(temp)
        {
            count1++;
            temp=temp->next;
        }
        temp=head2;
        while(temp)
        {
            count2++;
            temp=temp->next;
        }
        int d=abs(count1-count2);
        struct Node *t1=head1,*t2=head2;
        if(count1>count2)
        {
            temp=head1;
            while(d--)
            {
                if(temp==NULL)
                    return -1;
                temp=temp->next;
            }
            t1=temp;
        }
        else if(count2>count1)
        {
            temp=head2;
            while(d--)
            {
                if(temp==NULL)
                    return -1;
                temp=temp->next;
            }
            t2=temp;
        }
        while(t1->next!=NULL&&t2->next!=NULL)
        {
            if(t1==t2)
               return t1->data;
            t1=t1->next;t2=t2->next;
        }
        if(t1==t2)
            return t1->data;
    }
    return -1;
}
