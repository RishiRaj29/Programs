/*            Reverse a Singly Linked List         */

//The Solution given below is without Recursion

#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *next;
};

void Insert(struct Node **head,int value)
{
    struct Node *new_node,*temp=*head;
    new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=value;
    new_node->next=NULL;
    if((*head)==NULL)
        *head=new_node;
    else
    {
        while(temp->next!=NULL)
             temp=temp->next;
        temp->next=new_node;
    }
}


/* Here p is prev,c is current and n is next. */

struct Node* ReverseList(struct Node *head)
{
    struct Node *p=head,*c=head->next,*n=c->next;
    p->next=NULL;
    while(c->next!=NULL)
    {
        c->next=p;
        p=c;
        c=n;
        n=n->next;
    }
    c->next=p;
    head=c;
    return head;
}

void Display(struct Node *head)
{
    struct Node *temp=head;
    while(temp->next!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<temp->data<<endl;
}
int main()
{
    struct Node *head=NULL;
    Insert(&head,1);
    Insert(&head,2);
    Insert(&head,3);
    cout<<"The List before Reversal is as follows-\n";
    Display(head);
    head=ReverseList(head);
    cout<<"The List after Reversal is as follows-\n";
    Display(head);
    return 0;
}


