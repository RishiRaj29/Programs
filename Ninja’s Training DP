/*   Ninjaâ€™s Training DP    */

// Problem Link->  https://bit.ly/3F4yl8z

// Memoization

int fun(int day,int last,vector<vector<int>> &points, vector<vector<int>> &dp)
{
    if(day == 0)
    {
        int maxi = 0;
        for(int i = 0; i <= 2; i++)
        {
            if(i != last)
                maxi = max(maxi , points[day][i]);
        }
        return maxi;
    }
    int maxi = 0;
    for(int i = 0; i <= 2; i++)
    {
        if(i != last)
        {
            if(dp[day-1][i] == -1)
            {
                dp[day - 1][i] = fun(day - 1 , i, points, dp);
                maxi = max(maxi , points[day][i] + dp[day - 1][i]);
            }
            else
            {
                maxi = max(maxi , points[day][i] + dp[day - 1][i]);
            }
        }
    }
    return maxi;
}


int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n , vector<int>(4,-1));
    return fun(n-1, 3, points, dp);
}


// Dynamic Programming

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp(n , vector<int>(4,-1));
    dp[0][0] = max(points[0][1],points[0][2]);
    dp[0][1] = max(points[0][0],points[0][2]);
    dp[0][2] = max(points[0][0],points[0][1]);
    dp[0][3] = max(points[0][1],max(points[0][0],points[0][2]));
    for(int day = 1;day < n;day++)
    {
        for(int last = 0;last < 4;last++)
        {
            dp[day][last] = 0;
            int maxi = 0;
            for(int task = 0; task < 3;task++)
            {
                if(last != task)
                    dp[day][last] = max(dp[day][last] , points[day][task] + dp[day-1][task]);
            }
        }
    }
    return dp[n-1][3];
}
