/*     House Robber II LeetCode     */

int robbery(vector<int> &nums) // THIS LOGIC IS SAME AS THAT OF "HOUSE ROBBER" LEETCODE QUESTION
{
    int n=nums.size();
    vector<int>dp(n+1,-1);

    dp[0]=nums[0];
    dp[1]=max(dp[0],nums[1]);

    for(int i=2;i<n;i++)
        dp[i]=max(dp[i-1],nums[i]+dp[i-2]);

    return dp[n-1];
}



class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size()==1)
            return nums[0];
        if(nums.size()==2)
            return max(nums[0],nums[1]);
            
   // SINCE HOUSES ARE CIRCULAR HENCE IN THE FINAL ANS WE CAN HAVE EITHER THE FIRST HOUSE INCLUDED AND LAST HOUSE EXCLUDED , OR THE FIRST HOUSE EXCLUDED AND LAST HOUSE INCLUDED
   // THE REMAINING LOGIC IS SAME AS THAT OF "HOUSE ROBBER" LEETCODE QUESTION
   
        vector<int>a(nums.begin(),nums.end()-1);// FIRST INCLUDED AND LAST EXCLUDED
        
        vector<int>b(nums.begin()+1,nums.end());// FIRST EXCLUDED AND LAST INCLUDED

        return max(robbery(a),robbery(b));
    }
};
