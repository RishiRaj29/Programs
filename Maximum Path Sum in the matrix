/*      Maximum Path Sum in the matrix       */

// Problem Link->  https://bit.ly/3F436dK

#include <bits/stdc++.h>
int getMaxPathSum(vector<vector<int>> &matrix)
{
    //  Write your code here.
    int row=matrix.size(),col=matrix[row-1].size(),i,j;
    
    // In this we will follow the top down approach
    
    vector<vector<int>> dp(row+1,vector<int>(col+1,INT_MIN));

    for(j=0;j<col;j++)// INSERT FIRST ROW AS IT IS AS THE FIRST ROW OF THE Dp
        dp[0][j]=matrix[0][j];

    for(i=0;i<row-1;i++)
    {
        for(j=0;j<col;j++)
        {
            if(j==0)// If j=0 then you can go down and down-right
            {
                dp[i+1][j]=dp[i][j]+matrix[i+1][j];
                dp[i+1][j+1]=dp[i][j]+matrix[i+1][j+1];
            }
            else if(j==col-1)// If j=col-1 then you can go down-left and down
            {
                dp[i+1][j-1]=max(dp[i+1][j-1],dp[i][j]+matrix[i+1][j-1]);
                dp[i+1][j]=max(dp[i+1][j],dp[i][j]+matrix[i+1][j]);
            }
            else// You have all the three options
            {
                dp[i+1][j-1]=max(dp[i+1][j-1],dp[i][j]+matrix[i+1][j-1]);
                dp[i+1][j]=max(dp[i+1][j],dp[i][j]+matrix[i+1][j]);
                dp[i+1][j+1]=max(dp[i+1][j+1],dp[i][j]+matrix[i+1][j+1]);
            }
        }
    }
    
    // Now find the maximum value in the last row
    
    int ans=dp[row-1][0];
    for(j=1;j<col;j++)
        if(dp[row-1][j]>ans)
        {
            ans=dp[row-1][j];
        }
    return ans;
}
