                /*                MINIMUM NUMBER OF SWAPS REQUIRED TO BRING ELEMENTS LESS THAN OR EQUAL TO k TOGETHER        */
                
  /*
Input->
2
5 3
2 1 5 6 3 
7 6 
2 7 9 5 8 7 4

Output->
1
2
*/

/*Approach -> We will firstly count all the numbers less than or equal to k  and then make a window of that size
              Each  time we move the window forward by a unit distance we will count all elements greater than k and store it
              At the end we will output the smallest value of all the values we stored for k
              TIME COMPLEXITY-> O(n)
*/

//Solution->

#include<bits/stdc++.h>
using namespace std;

int MinimumSwaps(int arr[],int n,int k)
{
    int count=0,m=0,i,ans=1000000,j;
        for(i=0;i<n;i++)
            if(arr[i]<=k)
               count++;
        for(i=0;i<count;i++)
        {
            if(arr[i]>k)
                m++;
        }
        if(m<ans)
        {
            ans=m;
        }
        for(i=1,j=count;j<n;i++,j++)
        {
            if(arr[i-1]>k)
                m--;
            if(arr[j]>k)
                m++;
            if(m<ans)
            {
               ans=m;
            }
        }
        return ans;
}

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,k,i;
        cin>>n>>k;
        int arr[n+1];
        for(i=0;i<n;i++)
            cin>>arr[i];
        int ans=MinimumSwaps(arr,n,k);
        cout<<ans<<endl;
    }
    return 0;
}
