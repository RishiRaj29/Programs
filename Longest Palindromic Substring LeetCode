/*       Longest Palindromic Substring LeetCode         */

class Solution {
public:
    string longestPalindrome(string s)
{
    int n=s.length();
    if(n==1)
        return s;
    if(n==2 && s[0]==s[1])
        return s;
    if(n==2 && s[0]!=s[1])
    {
        string t="";
        t+=s[0];
        return t;
    }
     if(n==3 && s[0]==s[1]&&s[1]==s[2])
        return s;
    if(n==3 && s[0]==s[2])
        return s;
    if(n==3 && s[0]==s[1])
        return s.substr(0,2);
    if(n==3 && s[1]==s[2])
        return s.substr(1,s.length());
    if(n==3 &&s[0]!=s[1]&&s[1]!=s[2])
    {
        string t="";
        t+=s[0];
        return t;
    }
    // MY LOGIC DOES NOT WORK FOR STRINGS OF LENGTH LESS THAN 4
    
    // MAIN LOGIC STARTS FROM HERE
    
    int max_length=0,i,start_index=0,end,start,len;
    string ans="";

    for(i=0;i<s.size()-1;i++)
    {

        //start finding the even length palindrome for index=i
        
        if(i==0)
            continue;
        start=i;end=i+1;
        while(s[start]==s[end]&&start-1>=0&&end+1<=n-1)
        {
            start--;
            end++;
        }
        if(s[start]!=s[end]&&start!=i&&end!=i+1)
        {
            start++;
            end--;
        }
        if(s[start]==s[end])
        {
            len=end-start+1;
            if(len>max_length)
            {
                max_length=len;
                ans=s.substr(start,len);
            }
        }
      
        //start finding the odd length palindrome for index=i
        
        if(i==0)//odd length palindromes cannot start from index=0
            continue;

        start=i-1;end=i+1;
        while(s[start]==s[end]&&start-1>=0&&end+1<=n-1)
        {
            start--;
            end++;
        }
        //if((start-1)<0&&s[start]==s[end])
            //len=end+1;
        //if((end+1>=n)&&s[start]==s[end])
            //len=end-start+1;
        if(s[start]!=s[end]&&s[i-1]==s[i+1])
        {
            end=end-1;
            start=start+1;
        }
        if(s[start]==s[end])
        {
            len=end-start+1;
            if(len>max_length)
            {
                max_length=len;
                ans=s.substr(start,len);
            }
        }
        
    }
    if(ans.length()==0)
    {
        string t="";
        t+=s[0];
        return t;
    }
    return ans;
}
};
